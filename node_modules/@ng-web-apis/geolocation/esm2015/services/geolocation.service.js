import { Inject, Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { finalize, shareReplay } from 'rxjs/operators';
import { GEOLOCATION } from '../tokens/geolocation';
import { POSITION_OPTIONS } from '../tokens/geolocation-options';
import { GEOLOCATION_SUPPORT } from '../tokens/geolocation-support';
import * as i0 from "@angular/core";
// TODO: Replace type with GeolocationPosition after bumping TS to 4.1.3+
// @dynamic
export class GeolocationService extends Observable {
    constructor(geolocationRef, geolocationSupported, positionOptions) {
        let watchPositionId = 0;
        super(subscriber => {
            if (!geolocationSupported) {
                subscriber.error('Geolocation is not supported in your browser');
            }
            watchPositionId = geolocationRef.watchPosition(position => subscriber.next(position), positionError => subscriber.error(positionError), positionOptions);
        });
        return this.pipe(finalize(() => geolocationRef.clearWatch(watchPositionId)), shareReplay({ bufferSize: 1, refCount: true }));
    }
}
GeolocationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: GeolocationService, deps: [{ token: GEOLOCATION }, { token: GEOLOCATION_SUPPORT }, { token: POSITION_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });
GeolocationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: GeolocationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: GeolocationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: Geolocation, decorators: [{
                    type: Inject,
                    args: [GEOLOCATION]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [GEOLOCATION_SUPPORT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [POSITION_OPTIONS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbG9jYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2dlb2xvY2F0aW9uL3NyYy9zZXJ2aWNlcy9nZW9sb2NhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDbEQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFDL0QsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sK0JBQStCLENBQUM7O0FBRWxFLHlFQUF5RTtBQUN6RSxXQUFXO0FBSVgsTUFBTSxPQUFPLGtCQUFtQixTQUFRLFVBQTJDO0lBQy9FLFlBQ3lCLGNBQTJCLEVBQ25CLG9CQUE2QixFQUUxRCxlQUFnQztRQUVoQyxJQUFJLGVBQWUsR0FBRyxDQUFDLENBQUM7UUFFeEIsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2YsSUFBSSxDQUFDLG9CQUFvQixFQUFFO2dCQUN2QixVQUFVLENBQUMsS0FBSyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7YUFDcEU7WUFFRCxlQUFlLEdBQUcsY0FBYyxDQUFDLGFBQWEsQ0FDMUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUNyQyxhQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQ2hELGVBQWUsQ0FDbEIsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUNaLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQzFELFdBQVcsQ0FBQyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQ3pCLENBQUM7SUFDNUIsQ0FBQzs7Z0hBekJRLGtCQUFrQixrQkFFZixXQUFXLGFBQ1gsbUJBQW1CLGFBQ25CLGdCQUFnQjtvSEFKbkIsa0JBQWtCLGNBRmYsTUFBTTs0RkFFVCxrQkFBa0I7a0JBSDlCLFVBQVU7bUJBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzBEQUc0QyxXQUFXOzBCQUEvQyxNQUFNOzJCQUFDLFdBQVc7OzBCQUNsQixNQUFNOzJCQUFDLG1CQUFtQjs7MEJBQzFCLE1BQU07MkJBQUMsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZmluYWxpemUsIHNoYXJlUmVwbGF5fSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0dFT0xPQ0FUSU9OfSBmcm9tICcuLi90b2tlbnMvZ2VvbG9jYXRpb24nO1xuaW1wb3J0IHtQT1NJVElPTl9PUFRJT05TfSBmcm9tICcuLi90b2tlbnMvZ2VvbG9jYXRpb24tb3B0aW9ucyc7XG5pbXBvcnQge0dFT0xPQ0FUSU9OX1NVUFBPUlR9IGZyb20gJy4uL3Rva2Vucy9nZW9sb2NhdGlvbi1zdXBwb3J0JztcblxuLy8gVE9ETzogUmVwbGFjZSB0eXBlIHdpdGggR2VvbG9jYXRpb25Qb3NpdGlvbiBhZnRlciBidW1waW5nIFRTIHRvIDQuMS4zK1xuLy8gQGR5bmFtaWNcbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEdlb2xvY2F0aW9uU2VydmljZSBleHRlbmRzIE9ic2VydmFibGU8UGFyYW1ldGVyczxQb3NpdGlvbkNhbGxiYWNrPlswXT4ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEdFT0xPQ0FUSU9OKSBnZW9sb2NhdGlvblJlZjogR2VvbG9jYXRpb24sXG4gICAgICAgIEBJbmplY3QoR0VPTE9DQVRJT05fU1VQUE9SVCkgZ2VvbG9jYXRpb25TdXBwb3J0ZWQ6IGJvb2xlYW4sXG4gICAgICAgIEBJbmplY3QoUE9TSVRJT05fT1BUSU9OUylcbiAgICAgICAgcG9zaXRpb25PcHRpb25zOiBQb3NpdGlvbk9wdGlvbnMsXG4gICAgKSB7XG4gICAgICAgIGxldCB3YXRjaFBvc2l0aW9uSWQgPSAwO1xuXG4gICAgICAgIHN1cGVyKHN1YnNjcmliZXIgPT4ge1xuICAgICAgICAgICAgaWYgKCFnZW9sb2NhdGlvblN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoJ0dlb2xvY2F0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4geW91ciBicm93c2VyJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdhdGNoUG9zaXRpb25JZCA9IGdlb2xvY2F0aW9uUmVmLndhdGNoUG9zaXRpb24oXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPT4gc3Vic2NyaWJlci5uZXh0KHBvc2l0aW9uKSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbkVycm9yID0+IHN1YnNjcmliZXIuZXJyb3IocG9zaXRpb25FcnJvciksXG4gICAgICAgICAgICAgICAgcG9zaXRpb25PcHRpb25zLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucGlwZShcbiAgICAgICAgICAgIGZpbmFsaXplKCgpID0+IGdlb2xvY2F0aW9uUmVmLmNsZWFyV2F0Y2god2F0Y2hQb3NpdGlvbklkKSksXG4gICAgICAgICAgICBzaGFyZVJlcGxheSh7YnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IHRydWV9KSxcbiAgICAgICAgKSBhcyBHZW9sb2NhdGlvblNlcnZpY2U7XG4gICAgfVxufVxuIl19